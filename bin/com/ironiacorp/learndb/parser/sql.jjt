/**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
}
 
PARSER_BEGIN(eg2) 
package com.ironiacorp.learndb.parser;

public class eg2 {
	
	/**
	 * Determine whether the next sequence of tokens represents one of
	 * the common (built-in) datatypes.
	 *
	 * @return	TRUE iff the next set of tokens names a common datatype
	 */
	boolean commonDatatypeName(boolean checkFollowingToken)
	{
		boolean retval = false;

		switch (getToken(1).kind)
		{
		  case CHARACTER:
		  case CHAR:
		  case VARCHAR:
		  case NVARCHAR:
		  case NCHAR:
		  case BIT:
		  case NUMERIC:
		  case DECIMAL:
		  case DEC:
		  case INTEGER:
		  case INT:
		  case SMALLINT:
		  case LONGINT:
		  case FLOAT:
		  case REAL:
		  case DATE:
		  case TIME:
		  case TIMESTAMP:
		  case BOOLEAN:
		  case DOUBLE:
		  case BLOB:
		  case CLOB:
		  case NCLOB:
		  case BINARY: // LARGE OBJECT
			retval = true;
			break;

		  case LONG:
			if (checkFollowingToken == true)
			{
				switch (getToken(2).kind)
				{
				  case VARCHAR:
				  case NVARCHAR:
				  case BINARY:
				  case VARBINARY:
				  case BIT:
					retval = true;
					break;
				}
				break;
			}
			else
			{
				retval = true;
				break;
			}
		}

		return retval;
	}
	
	
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    new eg2(System.in);
    try {
      SimpleNode n = eg2.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(eg2)


SKIP :
{	/* white space */
	  " "
	| "\t"
	| "\n"
	| "\r"
}

SKIP :
{	/* comments */
	<"#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: ["_","a"-"z","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}


/**
This list should contain only and all SQL92 keywords that are reserved.
Reserved keywords can be used as identifiers in the language only
as delimited identifiers.
*/
TOKEN [IGNORE_CASE] :
{	/* SQL92 reserved Keywords */
	<ADD: "add">
|	<ALL: "all">
|	<ALLOCATE: "allocate">
|	<ALTER: "alter">
|	<AND: "and">
|	<ANY: "any">
|	<ARE: "are">
|	<AS: "as">
|	<ASC: "asc">
|	<ASSERTION: "assertion">
|	<AT: "at">
|	<AUTHORIZATION: "authorization">
|	<AVG: "avg">
|	<BEGIN: "begin">
|	<BETWEEN: "between">
|	<BINARY: "binary">
|	<BIT: "bit">
|	<BOTH: "both">
|	<BY: "by">
|	<CASCADE: "cascade">
|	<CASCADED: "cascaded">
|	<CASE: "case">
|	<CAST: "cast">
|	<CHAR: "char">
|	<CHARACTER: "character">
|	<CHARACTER_LENGTH: "character_length">
|	<CHECK: "check">
|	<CLOSE: "close">
|	<COALESCE: "coalesce">
|	<COLLATE: "collate">
|	<COLLATION: "collation">
|	<COLUMN: "column">
|	<COMMIT: "commit">
|	<CONNECT: "connect">
|	<CONNECTION: "connection">
|	<CONSTRAINT: "constraint">
|	<CONSTRAINTS: "constraints">
|	<CONTINUE: "continue">
|	<CONVERT: "convert">
|	<CORRESPONDING: "corresponding">
|	<COUNT: "count">
|	<CREATE: "create">
|	<CURRENT: "current">
|	<CURRENT_DATE: "current_date">
|	<CURRENT_TIME: "current_time">
|	<CURRENT_TIMESTAMP: "current_timestamp">
|	<CURRENT_USER: "current_user">
|	<CURSOR: "cursor">
|	<D: "d">
|	<DEALLOCATE: "deallocate">
|	<DEC: "dec">
|	<DECIMAL: "decimal">
|	<DECLARE: "declare">
|	<_DEFAULT: "default">
|	<DEFERRABLE: "deferrable">
|	<DEFERRED: "deferred">
|	<DELETE: "delete">
|	<DESC: "desc">
|	<DESCRIBE: "describe">
|	<DIAGNOSTICS: "diagnostics">
|	<DISCONNECT: "disconnect">
|	<DISTINCT: "distinct">
|	<DOUBLE: "double">
|	<DROP: "drop">
|	<ELSE: "else">
|	<END: "end">
|	<ENDEXEC: "end-exec">
|	<ESCAPE: "escape">
|	<EXCEPT: "except">
|	<EXCEPTION: "exception">
|	<EXEC: "exec">
|	<EXECUTE: "execute">
|	<EXISTS: "exists">
|	<EXTERNAL: "external">
|	<FALSE: "false">
|	<FETCH: "fetch">
|	<FIRST: "first">
|	<FLOAT: "float">
|	<FOR: "for">
|	<FOREIGN: "foreign">
|	<FOUND: "found">
|	<FROM: "from">
|	<FULL: "full">
|	<FUNCTION: "function">
|	<GET: "get">
|	<GLOBAL: "global">
|	<GO: "go">
|	<GOTO: "goto">
|	<GRANT: "grant">
|	<GROUP: "group">
|	<HAVING: "having">
|	<HOUR: "hour">
|	<IDENTITY: "identity">
|	<IMMEDIATE: "immediate">
|	<IN: "in">
|	<INDICATOR: "indicator">
|	<INITIALLY: "initially">
|	<INNER: "inner">
|	<INPUT: "input">
|	<INSENSITIVE: "insensitive">
|	<INSERT: "insert">
|	<INT: "int">
|	<INTEGER: "integer">
|	<INTERSECT: "intersect">
|	<INTO: "into">
|	<IS: "is">
|	<ISOLATION: "isolation">
|	<JOIN: "join">
|	<KEY: "key">
|	<LAST: "last">
|	<LEFT: "left">
|	<LIKE: "like">
|	<LOWER: "lower">
|	<MATCH: "match">
|	<MAX: "max">
|	<MIN: "min">
|	<MINUTE: "minute">
|	<MODULE: "module">
|	<NATURAL: "natural">
|	<NEXT: "next">
|	<NO: "no">
|	<NOT: "not">
|	<NULL: "null">
|	<NULLIF: "nullif">
|	<NUMERIC: "numeric">
|	<OF: "of">
|	<ON: "on">
|	<ONLY: "only">
|	<OPEN: "open">
|	<OPTION: "option">
|	<OR: "or">
|	<ORDER: "order">
|	<OUTER: "outer">
|	<OUTPUT: "output">
|	<OVERLAPS: "overlaps">
|	<PAD: "pad">
|	<PARTIAL: "partial">
|	<PREPARE: "prepare">
|	<PRESERVE: "preserve">
|	<PRIMARY: "primary">
|	<PRIOR: "prior">
|	<PRIVILEGES: "privileges">
|	<PROCEDURE: "procedure">
|	<PUBLIC: "public">
|	<READ: "read">
|	<REAL: "real">
|	<REFERENCES: "references">
|	<RELATIVE: "relative">
|	<RESTRICT: "restrict">
|	<REVOKE: "revoke">
|	<RIGHT: "right">
|	<ROLLBACK: "rollback">
|	<ROWS: "rows">
|	<SCHEMA: "schema">
|	<SCROLL: "scroll">
|	<SECOND: "second">
|	<SELECT: "select">
|	<SESSION_USER: "session_user">
|	<SET: "set">
|	<SMALLINT: "smallint">
|	<SOME: "some">
|	<SPACE: "space">
|	<SQL: "sql">
|	<SQLCODE: "sqlcode">
|	<SQLERROR: "sqlerror">
|	<SQLSTATE: "sqlstate">
|	<SUBSTRING: "substring">
|	<SUM: "sum">
|	<SYSTEM_USER: "system_user">
|	<T: "t">
|	<TABLE: "table">
|	<TEMPORARY: "temporary">
|	<TIMEZONE_HOUR: "timezone_hour">
|	<TIMEZONE_MINUTE: "timezone_minute">
|	<TO: "to">
|	<TRANSACTION: "transaction">
|	<TRANSLATE: "translate">
|	<TRANSLATION: "translation">
|	<TRUE: "true">
|	<TS: "ts">
|	<UNION: "union">
|	<UNIQUE: "unique">
|	<UNKNOWN: "unknown">
|	<UPDATE: "update">
|	<UPPER: "upper">
|	<USER: "user">
|	<USING: "using">
|	<VALUE: "value">
|	<VALUES: "values">
|	<VARBINARY: "varbinary">
|	<VARCHAR: "varchar">
|	<VARYING: "varying">
|	<VIEW: "view">
|	<WHENEVER: "whenever">
|	<WHERE: "where">
|	<WITH: "with">
|	<WORK: "work">
|	<WRITE: "write">
|	<YEAR: "year">
}

/**
This list should contain only and all SQL92 keywords that are non-reserved.
Non-reserved keywords can be used as identifiers in the language.
To make that happen, the individual tokens have to be repeated in
the nonReservedKeyword() rule -- unless there's some other JavaCC shorthand?
*/
TOKEN [IGNORE_CASE] :
{	/* SQL92 non-reserved Keywords */
	<BLOB: "blob">
|	<CLOB: "clob">
|	<CONTAINS: "contains">
|	<DATE: "date">
|	<DAY: "day">
|	<INCREMENT: "increment">
|	<INITIAL: "initial">
|	<INTERVAL: "interval">
|	<LEVEL: "level">
|	<LOCKS: "locks">
|	<LOCKSIZE: "locksize">
|	<REPEATABLE: "repeatable">
|	<SAVEPOINT: "savepoint">
|	<TIME: "time">
|	<TIMESTAMP: "timestamp">
|	<TRUNCATE: "truncate">
|	<UNCOMMITTED: "uncommitted">
}

/*
	The next lists should contain non-SQL92 keywords, and should
	specify whether their keywords are reserved or non-reserved.
	If they are non-reserved, they need to be added to the identifier() rule.
 */
TOKEN [IGNORE_CASE] :
{	/* Additional JSQL reserved keywords -- non-SQL92 reserved Keywords */
	<AFTER: "after">
|	<BEFORE: "before">
|	<BOOLEAN: "boolean">
|   <DATABASE: "database">
|	<EMPTY: "empty">
|	<EXPLAIN: "explain">
|	<INDEX: "index">
|	<LOCK: "lock">
|	<LONGINT: "bigint">
|	<LONG: "long">
}

TOKEN :
{	/* Operators and punctuation */
	<DOUBLE_QUOTE: "\"">
|	<PERCENT: "%">
|	<AMPERSAND: "&">
|	<QUOTE: "'">
|	<LEFT_BRACE: "{">
|	<RIGHT_BRACE: "}">
|	<LEFT_PAREN: "(">
|	<RIGHT_PAREN: ")">
|	<ASTERISK: "*">
|	<PLUS_SIGN: "+">
|	<COMMA: ",">
|	<MINUS_SIGN: "-">
|	<PERIOD: ".">
|	<SOLIDUS: "/">
|	<COLON: ":">
|	<DOUBLE_COLON: "::">
|	<SEMICOLON: ";">
|	<LESS_THAN_OPERATOR: "<">
|	<LESS_THAN_OR_EQUALS_OPERATOR: "<=">
|	<EQUALS_OPERATOR: "=">
|	<NOT_EQUALS_OPERATOR: "<>">
|	<NOT_EQUALS_OPERATOR2: "!=">
|	<GREATER_THAN_OPERATOR: ">">
|	<GREATER_THAN_OR_EQUALS_OPERATOR: ">=">
|	<QUESTION_MARK: "?">
|	<UNDERSCORE: "_">
|	<VERTICAL_BAR: "|">
|	<LEFT_BRACKET: "[">
|	<RIGHT_BRACKET: "]">
|	<CONCATENATION_OPERATOR: "||">
|	<FIELD_REFERENCE: "->">
}


TOKEN:
{
	<#LETTER: [
				"a"-"z",
				"A"-"Z",
				"\u00aa",
				"\u00b5",
				"\u00ba",
				"\u00c0" - "\u00d6",
				"\u00d8" - "\u00f6",
				"\u00f8" - "\u01f5",
				"\u01fa" - "\u0217",
				"\u0250" - "\u02a8",
				"\u02b0" - "\u02b8",
				"\u02bb" - "\u02c1",
				"\u02d0" - "\u02d1",
				"\u02e0" - "\u02e4",
				"\u037a",
				"\u0386",
				"\u0388" - "\u038a",
				"\u038c",
				"\u038e" - "\u03a1",
				"\u03a3" - "\u03ce",
				"\u03d0" - "\u03d6",
				"\u03da",
				"\u03dc",
				"\u03de",
				"\u03e0",
				"\u03e2" - "\u03f3",
				"\u0401" - "\u040c",
				"\u040e" - "\u044f",
				"\u0451" - "\u045c",
				"\u045e" - "\u0481",
				"\u0490" - "\u04c4",
				"\u04c7" - "\u04c8",
				"\u04cb" - "\u04cc",
				"\u04d0" - "\u04eb",
				"\u04ee" - "\u04f5",
				"\u04f8" - "\u04f9",
				"\u0531" - "\u0556",
				"\u0559",
				"\u0561" - "\u0587",
				"\u05d0" - "\u05ea",
				"\u05f0" - "\u05f2",
				"\u0621" - "\u063a",
				"\u0640" - "\u064a",
				"\u0671" - "\u06b7",
				"\u06ba" - "\u06be",
				"\u06c0" - "\u06ce",
				"\u06d0" - "\u06d3",
				"\u06d5",
				"\u06e5" - "\u06e6",
				"\u0905" - "\u0939",
				"\u093d",
				"\u0958" - "\u0961",
				"\u0985" - "\u098c",
				"\u098f" - "\u0990",
				"\u0993" - "\u09a8",
				"\u09aa" - "\u09b0",
				"\u09b2",
				"\u09b6" - "\u09b9",
				"\u09dc" - "\u09dd",
				"\u09df" - "\u09e1",
				"\u09f0" - "\u09f1",
				"\u0a05" - "\u0a0a",
				"\u0a0f" - "\u0a10",
				"\u0a13" - "\u0a28",
				"\u0a2a" - "\u0a30",
				"\u0a32" - "\u0a33",
				"\u0a35" - "\u0a36",
				"\u0a38" - "\u0a39",
				"\u0a59" - "\u0a5c",
				"\u0a5e",
				"\u0a72" - "\u0a74",
				"\u0a85" - "\u0a8b",
				"\u0a8d",
				"\u0a8f" - "\u0a91",
				"\u0a93" - "\u0aa8",
				"\u0aaa" - "\u0ab0",
				"\u0ab2" - "\u0ab3",
				"\u0ab5" - "\u0ab9",
				"\u0abd",
				"\u0ae0",
				"\u0b05" - "\u0b0c",
				"\u0b0f" - "\u0b10",
				"\u0b13" - "\u0b28",
				"\u0b2a" - "\u0b30",
				"\u0b32" - "\u0b33",
				"\u0b36" - "\u0b39",
				"\u0b3d",
				"\u0b5c" - "\u0b5d",
				"\u0b5f" - "\u0b61",
				"\u0b85" - "\u0b8a",
				"\u0b8e" - "\u0b90",
				"\u0b92" - "\u0b95",
				"\u0b99" - "\u0b9a",
				"\u0b9c",
				"\u0b9e" - "\u0b9f",
				"\u0ba3" - "\u0ba4",
				"\u0ba8" - "\u0baa",
				"\u0bae" - "\u0bb5",
				"\u0bb7" - "\u0bb9",
				"\u0c05" - "\u0c0c",
				"\u0c0e" - "\u0c10",
				"\u0c12" - "\u0c28",
				"\u0c2a" - "\u0c33",
				"\u0c35" - "\u0c39",
				"\u0c60" - "\u0c61",
				"\u0c85" - "\u0c8c",
				"\u0c8e" - "\u0c90",
				"\u0c92" - "\u0ca8",
				"\u0caa" - "\u0cb3",
				"\u0cb5" - "\u0cb9",
				"\u0cde",
				"\u0ce0" - "\u0ce1",
				"\u0d05" - "\u0d0c",
				"\u0d0e" - "\u0d10",
				"\u0d12" - "\u0d28",
				"\u0d2a" - "\u0d39",
				"\u0d60" - "\u0d61",
				"\u0e01" - "\u0e2e",
				"\u0e30",
				"\u0e32" - "\u0e33",
				"\u0e40" - "\u0e46",
				"\u0e81" - "\u0e82",
				"\u0e84",
				"\u0e87" - "\u0e88",
				"\u0e8a",
				"\u0e8d",
				"\u0e94" - "\u0e97",
				"\u0e99" - "\u0e9f",
				"\u0ea1" - "\u0ea3",
				"\u0ea5",
				"\u0ea7",
				"\u0eaa" - "\u0eab",
				"\u0ead" - "\u0eae",
				"\u0eb0",
				"\u0eb2" - "\u0eb3",
				"\u0ebd",
				"\u0ec0" - "\u0ec4",
				"\u0ec6",
				"\u0edc" - "\u0edd",
				"\u0f40" - "\u0f47",
				"\u0f49" - "\u0f69",
				"\u10a0" - "\u10c5",
				"\u10d0" - "\u10f6",
				"\u1100" - "\u1159",
				"\u115f" - "\u11a2",
				"\u11a8" - "\u11f9",
				"\u1e00" - "\u1e9b",
				"\u1ea0" - "\u1ef9",
				"\u1f00" - "\u1f15",
				"\u1f18" - "\u1f1d",
				"\u1f20" - "\u1f45",
				"\u1f48" - "\u1f4d",
				"\u1f50" - "\u1f57",
				"\u1f59",
				"\u1f5b",
				"\u1f5d",
				"\u1f5f" - "\u1f7d",
				"\u1f80" - "\u1fb4",
				"\u1fb6" - "\u1fbc",
				"\u1fbe",
				"\u1fc2" - "\u1fc4",
				"\u1fc6" - "\u1fcc",
				"\u1fd0" - "\u1fd3",
				"\u1fd6" - "\u1fdb",
				"\u1fe0" - "\u1fec",
				"\u1ff2" - "\u1ff4",
				"\u1ff6" - "\u1ffc",
				"\u207f",
				"\u2102",
				"\u2107",
				"\u210a" - "\u2113",
				"\u2115",
				"\u2118" - "\u211d",
				"\u2124",
				"\u2126",
				"\u2128",
				"\u212a" - "\u2131",
				"\u2133" - "\u2138",
				"\u3005",
				"\u3031" - "\u3035",
				"\u3041" - "\u3094",
				"\u309b" - "\u309e",
				"\u30a1" - "\u30fa",
				"\u30fc" - "\u30fe",
				"\u3105" - "\u312c",
				"\u3131" - "\u318e",
				"\u4e00" - "\u9fa5",
				"\uac00" - "\ud7a3",
				"\uf900" - "\ufa2d",
				"\ufb00" - "\ufb06",
				"\ufb13" - "\ufb17",
				"\ufb1f" - "\ufb28",
				"\ufb2a" - "\ufb36",
				"\ufb38" - "\ufb3c",
				"\ufb3e",
				"\ufb40" - "\ufb41",
				"\ufb43" - "\ufb44",
				"\ufb46" - "\ufbb1",
				"\ufbd3" - "\ufd3d",
				"\ufd50" - "\ufd8f",
				"\ufd92" - "\ufdc7",
				"\ufdf0" - "\ufdfb",
				"\ufe70" - "\ufe72",
				"\ufe74",
				"\ufe76" - "\ufefc",
				"\uff21" - "\uff3a",
				"\uff41" - "\uff5a",
				"\uff66" - "\uffbe",
				"\uffc2" - "\uffc7",
				"\uffca" - "\uffcf",
				"\uffd2" - "\uffd7",
				"\uffda" - "\uffdc"
			]>
}

TOKEN :
{
	<#DIGIT: [
				"0" - "9",
				"\u0660" - "\u0669",
				"\u06f0" - "\u06f9",
				"\u0966" - "\u096f",
				"\u09e6" - "\u09ef",
				"\u0a66" - "\u0a6f",
				"\u0ae6" - "\u0aef",
				"\u0b66" - "\u0b6f",
				"\u0be7" - "\u0bef",
				"\u0c66" - "\u0c6f",
				"\u0ce6" - "\u0cef",
				"\u0d66" - "\u0d6f",
				"\u0e50" - "\u0e59",
				"\u0ed0" - "\u0ed9",
				"\u0f20" - "\u0f29",
				"\uff10" - "\uff19"
			]>
}

TOKEN :
{	/* Literals */
	<EXACT_NUMERIC: ( <UINT> ( "." ( <UINT> )? )? | "." <UINT> )>
|	<UINT: (["0" - "9"])+ >/* This is for an unsigned exact numeric */
|	<LENGTH_MODIFIER: ( <UINT> ["K","M","G","k","m","g"] )>
|	<HEX_STRING: ["X","x"] "'" (["0"-"9","a"-"f","A"-"F"])*"'"> /* RESOLVE: does not allow separators */
|	<APPROXIMATE_NUMERIC: <EXACT_NUMERIC> ["e","E"] ( ("+" | "-") )? ( ["0" - "9"] )+ >
/*****
	The tokenizer can't handle the date/time literals because
	they are constructed of two tokens with arbitrary whitespace between them.
	INTERVAL_LITERAL will also have to be upgraded at some point.
|	<DATE_LITERAL: "DATE" "'" <DATE_VALUE> "'" >
|	<#DATE_VALUE: <UINT> "-" <UINT> "-" <UINT> >
|	<TIME_LITERAL: "TIME" "'" <TIME_VALUE> ( <TIMEZONE_INTERVAL> ) ? "'" >
|	<#TIME_VALUE: <UINT> ":" <UINT> ":" <SECONDS_VALUE> >
|	<#TIMEZONE_INTERVAL: ("+" | "-") <UINT> ":" <UINT> >
|	<TIMESTAMP_LITERAL: "TIMESTAMP" "'" <DATE_VALUE> " " <TIME_VALUE> ( <TIMEZONE_INTERVAL> ) ? "'" >
*****/
|	<INTERVAL_LITERAL: "INTERVAL" "'" (["+","-"])? <INTERVAL_STRING> <INTERVAL_QUALIFIER> >
|	<#INTERVAL_STRING: "'" ( <YEAR_MONTH_LITERAL> | <DAY_TIME_LITERAL> ) "'" >
|	<#INTERVAL_QUALIFIER: <SINGLE_DATETIME_FIELD> | ( <START_FIELD> <TO> <END_FIELD> ) >
|	<#SINGLE_DATETIME_FIELD: <NON_SECOND_DATETIME_FIELD> ( <LEFT_PAREN> <UINT> <RIGHT_PAREN> ) ? >
|	<#START_FIELD: <NON_SECOND_DATETIME_FIELD> ( <LEFT_PAREN> <UINT> <RIGHT_PAREN> ) ? >
|	<#END_FIELD: <NON_SECOND_DATETIME_FIELD> >
|	<#NON_SECOND_DATETIME_FIELD: <YEAR> | <MONTH> | <DAY> | <HOUR> | <MINUTE> >
|	<#YEAR_MONTH_LITERAL: (<UINT> | ( <UINT> "-" ) )? <UINT> >
|	<#DAY_TIME_LITERAL:  ( <DAY_TIME_INTERVAL> | <TIME_INTERVAL> ) >
|	<#DAY_TIME_INTERVAL: <UINT> ( " " <UINT> ( ":" <UINT> ( ":" <SECONDS_VALUE> ) ? ) ? ) ? >
|	<#SECONDS_VALUE: <UINT> ( "." ( <UINT> ) ? ) ? >
|	<#TIME_INTERVAL: <UINT> ( ":" <UINT> ( ":" <SECONDS_VALUE> ) ? ) ?
		|	 <UINT> ( ":" <SECONDS_VALUE> ) ?
		|	<SECONDS_VALUE> >
}


TOKEN :
{	/* Identifiers */
	<IDENTIFIER: ( <LETTER> ) (<LETTER> | "_" | <DIGIT>)* >
}

QueryTreeNode
createStatement() :
{
	CreateStatement stmt;
}
{
	<CREATE> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	tableElementList = tableElementList()
	(
		stmt = new CreateTableStatement();
		stmt.statementNode = tableDefinition()
	)
	{
		return statementNode;
	}
}

TableElementList
tableElementList() throws StandardException :
{
	TableElementList tableElementList =
					(TableElementList) nodeFactory.getNode(C_NodeTypes.TABLE_ELEMENT_LIST);
}
{
	<LEFT_PAREN> tableElement(tableElementList)	(<COMMA> tableElement(tableElementList))* <RIGHT_PAREN>
	{
		return tableElementList;
	}
}

void
tableElement(TableElementList tableElementList) :
{
	TableElementNode	tableElement;
}
{
	tableElement = columnDefinition(tableElementList)
	{
		tableElementList.addTableElement(tableElement);
	}
|
	tableElement = tableConstraintDefinition()
	{
		tableElementList.addTableElement(tableElement);
	}
}

TableElementNode
columnDefinition(TableElementList tableElementList) throws StandardException :
{
	DataTypeDescriptor	typeDescriptor = null;
	ValueNode			defaultNode = null;
	String				columnName;
	long[]				autoIncrementInfo = new long[4];
}
{
	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	(
		typeDescriptor = dataTypeDDL()
	)
	[ defaultNode = defaultAndConstraints(typeDescriptor, tableElementList, columnName, autoIncrementInfo) ]
	{
		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.COLUMN_DEFINITION_NODE,
								columnName,
								defaultNode,
								typeDescriptor,
								autoIncrementInfo);
	}
}

ValueNode
defaultAndConstraints(DataTypeDescriptor typeDescriptor,
					  TableElementList tableElementList,
					  String columnName,
					  long[] autoIncrementInfo) throws StandardException :
{
	ValueNode		defaultNode = null;
}
{	// compatible with db2 syntax
	columnConstraintDefinition(typeDescriptor, tableElementList, columnName) ( columnConstraintDefinition(typeDescriptor, tableElementList, columnName)) *
	[ defaultNode = defaultClause(autoIncrementInfo, columnName) ( columnConstraintDefinition(typeDescriptor, tableElementList, columnName) )* ]
	{
		return defaultNode;
	}
|
	defaultNode = defaultClause(autoIncrementInfo, columnName)
	( columnConstraintDefinition(typeDescriptor, tableElementList, columnName) ) *
	{
		return defaultNode;
	}
}


TableElementNode
tableConstraintDefinition() throws StandardException :
{
	Properties properties = null;
	ConstraintDefinitionNode tcdn;
	TableName		constraintName = null;
	//initialize following two booleans before handling table level constraints
	explicitNotNull = false;
	explicitNull = false;
}
{
	[ constraintName = constraintNameDefinition() ] 
		tcdn = tableConstraint(constraintName) 
		[ properties = propertyList(false) <CHECK_PROPERTIES>]
	{
		if (properties != null)
		{
			tcdn.setProperties(properties);
		}
		return tcdn;
	}
}

ConstraintDefinitionNode
tableConstraint(TableName constraintName) throws StandardException :
{
	ConstraintDefinitionNode tcdn;
}
{
	tcdn = uniqueConstraintDefinition(constraintName) 
	{
		return tcdn;
	}
|
	tcdn = referentialConstraintDefinition(constraintName) 
	{
		return tcdn;
	}
|
	tcdn = checkConstraintDefinition(constraintName, null)
	{
		return tcdn;
	}
}

ConstraintDefinitionNode
uniqueConstraintDefinition(TableName constraintName) throws StandardException :
{
	int constraintType;
	ResultColumnList uniqueColumnList;
}
{
	//for table level constraint, second parameter will be null
	constraintType = uniqueSpecification((DataTypeDescriptor) null, null) 
		<LEFT_PAREN> uniqueColumnList = uniqueColumnList() <RIGHT_PAREN>
	{
		//go through the unique columns list and if any of the columns in the
		//list is explicitly defined null, throw an exception for this. Columns
		//for which no nullability is defined are by default nullable. But in
		//case of create table, there nullability changes automatically to 
		//non-nullable if primary key is defined on it. But if user explicitly
		//defines the nullability, then defining a primary key on it in create
		//table will result in an exception.
		if (constraintType ==  DataDictionary.PRIMARYKEY_CONSTRAINT)
		{
			for (int index = 0; index < uniqueColumnList.size(); index++)
			{
				String primaryKeyColumnName = ((ResultColumn) uniqueColumnList.elementAt(index)).getName();
				if (explicitlyNullableColumnsList.contains(primaryKeyColumnName))
				{
					String errorState = SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;
					throw StandardException.newException(errorState, primaryKeyColumnName);
				}
			}
		}
		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(constraintType),
						uniqueColumnList,
						null,
						null,
						null,
						getContextManager()
						);
	}
}

//the second parameter to the following method will always be null for a table level
//constraint but not for a column level constraint
int
uniqueSpecification(DataTypeDescriptor dataTypeDescriptor,
String columnName) throws StandardException :
{
}
{
	<UNIQUE> 
	{
		return DataDictionary.UNIQUE_CONSTRAINT;
	}
|
	<PRIMARY> <KEY>
	{
		//explicitNull can be true only if it's column level constraint and
		//that column has null constraint defined on it. In that case, defining
		//a column-level constraint of primary key on it will result in an error.
		if (explicitNull) 
		{
			String errorState = SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;
			throw StandardException.newException(errorState, columnName);
		}
		return DataDictionary.PRIMARYKEY_CONSTRAINT;
	}
}

ResultColumnList
uniqueColumnList() throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

ConstraintDefinitionNode
referentialConstraintDefinition(TableName constraintName) throws StandardException :
{
	ResultColumnList fkRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	ResultColumnList refRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	TableName referencedTable;
	int[] refActions = {StatementType.RA_NOACTION, 
			    StatementType.RA_NOACTION}; //default values
}
{
	<FOREIGN> <KEY> <LEFT_PAREN> columnNameList(fkRcl) <RIGHT_PAREN>
		referencedTable = referencesSpecification(refRcl, refActions)
	{
		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE,
						constraintName,
						referencedTable,
						fkRcl,
						refRcl,
						refActions,
						getContextManager());
	}
}

TableName
referencesSpecification(ResultColumnList rcl, int[] refActions) throws StandardException :
{
	TableName tableName = null;
}
{
	<REFERENCES> tableName = referencedTableAndColumns(rcl)
		// not supporting MATCH or referential actions beyond syntax for default
		[ <ON> referentialTriggeredAction(refActions) ]
	{
		return tableName;
	}
}

TableName
referencedTableAndColumns(ResultColumnList rcl) throws StandardException :
{
	TableName	tableName = null;
}
{
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) [ <LEFT_PAREN> columnNameList(rcl) <RIGHT_PAREN> ]
	{
		return tableName;
	}
}

void
referentialTriggeredAction(int [] refActions) throws StandardException :
{}
{
	( refActions[1] = updateRule() [<ON> refActions[0] = deleteRule() ] |
	refActions[0] = deleteRule() [<ON> refActions[1] = updateRule() ] )
}

int
updateRule() :
{
	int action;
}
{
	<UPDATE> action = updateReferentialAction()
	{
		return action;
	}
}

int
deleteRule()  :
{
	int action;
}
{
	<DELETE> action = deleteReferentialAction()
	{
		return action;
	}

}

int
updateReferentialAction() :
{}
{
	
	  <RESTRICT> {return StatementType.RA_RESTRICT;}
	| <NO> <ACTION> {return StatementType.RA_NOACTION;}

}

int
deleteReferentialAction() :
{}
{
	<CASCADE> {return StatementType.RA_CASCADE;}   
	| <RESTRICT> {return StatementType.RA_RESTRICT;} 
	| <NO> <ACTION> {return StatementType.RA_NOACTION;}
	| <SET> 
	   (  <NULL> {return StatementType.RA_SETNULL;}    
              |<_DEFAULT>  {return StatementType.RA_SETDEFAULT;}
	   )
}

/*
 * <A NAME="columnConstraintDefinition">columnConstraintDefinition</A>
 */
void
columnConstraintDefinition(DataTypeDescriptor dataTypeDescriptor,
						   TableElementList tableElementList,
						   String columnName) throws StandardException :
{
	int constraintType;
	TableElementNode tcdn;
	TableName constraintName = null;
}
{
	[ constraintName = constraintNameDefinition() ]
		tcdn = columnConstraint(constraintName, dataTypeDescriptor, columnName)
	{
		/* NOT NULL constraints are handled by marking the dataTypeDescriptor
		 * as being non-nullable.
		 */
		if (tcdn == null)
		{
			return;
		}

		/* All other constraints, whether column or table will be added as
		 * table constraints.  We do this to facilitate the handling of
		 * multiple column constraints on the same column.
		 */
		tableElementList.addTableElement(tcdn);
	}
}

/*
 * <A NAME="columnConstraint">columnConstraint</A>
 */
ConstraintDefinitionNode
columnConstraint(TableName constraintName,
				 DataTypeDescriptor dataTypeDescriptor,
				 String columnName) throws StandardException :
{
	int constraintType;
	Properties properties = null;
	ConstraintDefinitionNode tcdn;
	ResultColumnList refRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	TableName referencedTable;
	int[] refActions = {StatementType.RA_NOACTION,
                            StatementType.RA_NOACTION} ; //default: NO ACTION
}
{
	<NOT> <NULL>
	{
		//if column is explicitly defined not nullable, set following flag
		explicitNotNull = true;
		//if both null and not null constraints are defined for a column,
		//throw an exception
		if (explicitNull) 
                   throw StandardException.newException(SQLState.LANG_ADDING_COLUMN_WITH_NULL_AND_NOT_NULL_CONSTRAINT, columnName); 
		dataTypeDescriptor.setNullability(false);
		return null;
	}
|
	//pass the columnname as the second parameter. It will be used to throw an
	//exception if null constraint is defined for this column-level primary 
	//key constraint
	constraintType = uniqueSpecification(dataTypeDescriptor,columnName)
		[ properties = propertyList(false) <CHECK_PROPERTIES>]
	{
		ResultColumnList uniqueColumnList =
										(ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
		uniqueColumnList.addElement(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							columnName,
							null,
							getContextManager()));

		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(constraintType),
						uniqueColumnList,
						properties,
						null,
						null,
						getContextManager()
						);
	}
|	
	referencedTable = referencesSpecification(refRcl, refActions)
		[ properties = propertyList(false)<CHECK_PROPERTIES>] 
	{
		ResultColumnList fkRcl = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
		fkRcl.addElement(
					(ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager())
				);
		tcdn = (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE,
						constraintName,
						referencedTable,
						fkRcl,
						refRcl,
						refActions,
						getContextManager());
		if (properties != null)
		{
			tcdn.setProperties(properties);
		}
		return tcdn;
	}
|
	tcdn = checkConstraintDefinition(constraintName, columnName)
	{
		return tcdn;
	}
}


DataTypeDescriptor
dataTypeDDL() :
{
	DataTypeDescriptor typeDescriptor;
}
{
	LOOKAHEAD( { commonDatatypeName(false) } )
	typeDescriptor = dataTypeCommon()
	{
		return typeDescriptor;
	}
}


DataTypeDescriptor
dataTypeCommon() :
{
	DataTypeDescriptor	typeDescriptor;
	boolean checkCS = false;
}
{
	(
		typeDescriptor = characterStringType()
	|
		typeDescriptor = numericType()
	|
		typeDescriptor = datetimeType()
	|
		<BOOLEAN>
		{
			checkInternalFeature(TypeId.BOOLEAN_NAME);
			typeDescriptor = new DataTypeDescriptor(TypeId.BOOLEAN_ID, true);
		}
	|
		typeDescriptor = LOBType()
	)
	{
		return typeDescriptor;
	}
}

DataTypeDescriptor
characterStringType() throws StandardException :
{
	int					length = DEFAULT_STRING_COLUMN_LENGTH;
	Token				varyingToken = null;
	int type;
}
{
	(
		(
			<VARCHAR> length = charLength()
		)
		{
			type = Types.VARCHAR;
		}
	|
		(
			<CHAR> length = charLength()
		)
		{
			type = Types.CHAR;
		}
	)
	{
		checkTypeLimits(type,length);
		DataTypeDescriptor charDTD = DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
		return charDTD;
	}
}

int
charLength() :
{
	int length;
}
{
	<LEFT_PAREN> length = length() <RIGHT_PAREN>
	{
		return length;
	}
}


DataTypeDescriptor
LOBType() throws StandardException :
{
	int	length = 2147483647; // default to 2GB-1 if no length specified
	String	type;
}
{
	(
		<BLOB> [ length = lengthAndModifier() ]
		{
			type = TypeId.BLOB_NAME;
		}
	|
		<CLOB> [ length = lengthAndModifier() ]
		{
			type = TypeId.CLOB_NAME;
		}
	)
	{
		DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
		return dtd;
	}
}

DataTypeDescriptor
numericType() :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	typeDescriptor = exactNumericType()
	{
		return typeDescriptor;
	}
|
	typeDescriptor = approximateNumericType()
	{
		return typeDescriptor;
	}
}

/*
 * <A NAME="exactNumericType">exactNumericType</A>
 */
DataTypeDescriptor
exactNumericType() :
{
	int precision = TypeCompiler.DEFAULT_DECIMAL_PRECISION;
	int scale = TypeCompiler.DEFAULT_DECIMAL_SCALE;
	int type = Types.DECIMAL;
	String typeStr = "DECIMAL";
	int maxWidth;
	DataTypeDescriptor dtd =  null;
}
{
	(
		<NUMERIC> 
		{
			type = Types.NUMERIC;
			typeStr = "NUMERIC";
		}
	|
		<DECIMAL> | <DEC>
	)
	[ <LEFT_PAREN> precision = precision() [ <COMMA> scale = scale() ] <RIGHT_PAREN> ]
	{
		if ((precision <= 0) || (precision > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE))	{
			throw StandardException.newException(SQLState.LANG_INVALID_PRECISION, typeStr, String.valueOf(precision));
		} else if ((scale < 0) || (scale > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE)) {
			throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_SCALE, typeStr, String.valueOf(scale));
		} else if (scale > precision) {
			throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_PRECISION_SCALE, String.valueOf(scale), String.valueOf(precision));
		}
		/*
		* If we have a decimal point, need to count it towards maxwidth.  Max width needs to account
		* for the possible leading '0' and '-' and the decimal point.  e.g., DEC(1,1) has a maxwidth
		* of 4 (to handle "-0.1").
		*/
		maxWidth = DataTypeUtilities.computeMaxWidth( precision, scale);
		return getDataTypeServices(type, precision, scale, maxWidth);
	}
|
	dtd = exactIntegerType()
	{
		return dtd;
	}
}

DataTypeDescriptor
exactIntegerType() :
{
}
{
	(<INTEGER> | <INT>)
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.INTEGER);
	}
|
	<SMALLINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.SMALLINT);
	}
|
	<LONGINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT);
	}
}

DataTypeDescriptor
approximateNumericType() :
{
	int type = 0, scale = 0, width = 0;
	int prec = -1;
	DataTypeDescriptor dts = null;
}
{
	<FLOAT> [ <LEFT_PAREN> prec = precision() <RIGHT_PAREN> ]
	{
		/*
			When not specified, default is DOUBLE_PRECISION
		 */
		if (prec == -1) {
			prec = TypeId.DOUBLE_PRECISION;
		}

		if (prec > 0 && prec <= TypeId.REAL_PRECISION) {
			type = Types.REAL;
			prec = TypeId.REAL_PRECISION;
			scale = TypeId.REAL_SCALE;
			width = TypeId.REAL_MAXWIDTH;
		} else if (prec > TypeId.REAL_PRECISION && prec <= TypeId.DOUBLE_PRECISION)	{
			type = Types.DOUBLE;
			prec = TypeId.DOUBLE_PRECISION;
			scale = TypeId.DOUBLE_SCALE;
			width = TypeId.DOUBLE_MAXWIDTH;
		} else {
			throw StandardException.newException(SQLState.LANG_INVALID_PRECISION, "FLOAT", String.valueOf(prec));
		}

		return getDataTypeServices(type, prec, scale, width);
	}
| 
	<REAL>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.REAL);
	}
|
		dts = doubleType()
	{
		return dts;
	}
}


DataTypeDescriptor
doubleType()  :
{
}
{
	(LOOKAHEAD({getToken(2).kind == PRECISION}) <DOUBLE> <PRECISION> | <DOUBLE>)
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DOUBLE);
	}
}


int
lengthAndModifier() :
{
	Token	tok;
	Token	tokmod = null;
}
{
	<LEFT_PAREN> 
	(
		tok = <LENGTH_MODIFIER>
	)
	<RIGHT_PAREN>
	{
		String s = tok.image + (tokmod==null ? "" : tokmod.image); // colapse cases;
		try	{
			char modifier = s.charAt(s.length()-1);
			String number = s.substring(0, s.length()-1); // in case of ending w. letter
			long mul;
			switch (modifier) {
				case 'G': 
				case 'g':
					mul =1073741824L;	//1 Giga
					break;
				case 'M':
				case 'm':
					mul=1048576L;		// 1 Mega
					break;
				case 'K':
				case 'k':
					mul=1024L;		// 1 Kilo
					break;
				default:
					mul=1;
					number = s; // no letter in end, need whole string
					break;
			}
			long specifiedLength = Long.parseLong(number) * mul;
			
			// match DB2 limits of 1 to 2147483647
			if ((specifiedLength > 0L) && (specifiedLength <= Limits.DB2_LOB_MAXWIDTH)) {
           		return (int)specifiedLength;
           	}
		} catch (NumberFormatException nfe) {
		}
		throw StandardException.newException(SQLState.LANG_INVALID_COLUMN_LENGTH, s);
	}
}


int
length() :
{
	Token tok;
	int	retval;
}
{
	tok = <EXACT_NUMERIC>
	{
		try {
			retval = Integer.parseInt(tok.image);
			if (retval > 0) {
				return retval;
			}
		} catch (NumberFormatException nfe) {
		}
		throw StandardException.newException(SQLState.LANG_INVALID_COLUMN_LENGTH, tok.image);
	}
}


long
exactNumber() :
{
	Token longToken;
	String sign = "";
}
{
	[ sign = sign() ] longToken = <EXACT_NUMERIC>
	{
		try {
			long longvalue = Long.parseLong(longToken.image);
			if (sign.equals("-")) {
				return -longvalue;
			} else {
				return longvalue;
			}
		} catch (NumberFormatException nfe) {
			throw StandardException.newException(SQLState.LANG_INVALID_INTEGER_LITERAL, longToken.image);
		}
	}
}

int
precision() :
{
	int uintValue;
}
{
	uintValue = uint_value()
	{
		return uintValue;
	}
}

int 
uint_value() :
{
	Token uintToken;
}
{
	uintToken = <EXACT_NUMERIC>
	{
		try {
			return Integer.parseInt(uintToken.image);
		} catch (NumberFormatException nfe) {
			throw StandardException.newException(SQLState.LANG_INVALID_INTEGER_LITERAL, uintToken.image);
		}
	}
}

int
scale() :
{
	int uintValue;
}
{
	uintValue = uint_value()
	{
		return uintValue;
	}
}


DataTypeDescriptor
datetimeType() :
{
}
{
	<DATE> 
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DATE);
	}
|
	<TIME> 
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIME);
	}
|
	<TIMESTAMP> 
	{

		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIMESTAMP);
	}
}